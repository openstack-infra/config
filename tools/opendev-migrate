#!/usr/bin/python3

import csv
import io
import json
import requests
import yaml

# this will hold our mapping of old names(paces) to new
moves = {}

# here's a list of all (non-meta)projects in gerrit
repos = [r for r in json.loads(requests.get(
    'http://review.openstack.org/projects/').text[5:]).keys() if '/' in r]

# a map of the first pair of columns from the namespace request ethercalc
overrides = dict([r[:2] for r in csv.reader(io.StringIO(
    requests.get('https://ethercalc.openstack.org/opendev-transition.csv').text
    )) if '/' in r[1]])

# all projects which are (or ever were) an official part of openstack
openstack = []
o_gov = 'https://opendev.org/openstack/governance/raw/branch/master/reference/'
for f in ('projects.yaml', 'legacy.yaml'):
    data = yaml.safe_load(requests.get(o_gov + f).text)
    for team in data.values():
        for deli in team['deliverables'].values():
            for repo in deli['repos']:
                openstack.append(repo)
for f in ('foundation-board-repos.yaml', 'sigs-repos.yaml',
          'technical-committee-repos.yaml', 'user-committee-repos.yaml'):
    data = yaml.safe_load(requests.get(o_gov + f).text)
    for team in data.values():
        for repo in team:
            openstack.append(repo['repo'])

for repo in repos:
    # all current or former openstack repos move to openstack
    if repo in openstack:
        moves[repo] = 'openstack/' + repo.split('/')[1]

    # airship repos identified by a prefix drop it and go to airship
    elif repo.startswith('openstack/airship-'):
        moves[repo] = 'airship/' + repo[18:]

    # starlingx repos identified by a prefix drop it and go to starlingx
    elif repo.startswith('openstack/stx-'):
        moves[repo] = 'starlingx/' + repo[14:]

    # apply the requested namespace overrides
    elif repo in overrides:
        moves[repo] = overrides[repo]

    # unofficial repositories move from openstack to x
    elif repo.startswith('openstack/'):
        moves[repo] = 'x/' + repo.split('/')[1]

    # everything else is unchanged
    else:
        moves[repo] = repo

for mapping in moves.items():
    print('%s -> %s' % mapping)
