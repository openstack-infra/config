#!/usr/bin/env python

# Copyright 2015 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import yaml
import argparse
import logging

CONFIG_FILE = \
    '../modules/openstack_project/templates/nodepool/nodepool.yaml.erb'

BASIC_FILE = """

#
# THIS FILE HAS BEEN AUTOGENERATED
#
# see tools/generate-nodepool-loggers.py if you need to make
# modifications to this file
#

[loggers]
keys=root,nodepool,requests,image,%(logger_titles)s

[handlers]
keys=console,debug,normal,image,%(handler_titles)s

[formatters]
keys=simple

[logger_root]
level=WARNING
handlers=console

[logger_requests]
level=WARNING
handlers=debug,normal
qualname=requests

[logger_nodepool]
level=DEBUG
handlers=debug,normal
qualname=nodepool

[logger_image]
level=INFO
handlers=image
qualname=nodepool.image.build
propagate=0

[handler_console]
level=WARNING
class=StreamHandler
formatter=simple
args=(sys.stdout,)

[handler_debug]
level=DEBUG
class=logging.handlers.TimedRotatingFileHandler
formatter=simple
args=('/var/log/nodepool/debug.log', 'H', 8, 30,)

[handler_normal]
level=INFO
class=logging.handlers.TimedRotatingFileHandler
formatter=simple
args=('/var/log/nodepool/nodepool.log', 'H', 8, 30,)

[handler_image]
level=INFO
class=logging.handlers.TimedRotatingFileHandler
formatter=simple
args=('<%%= @image_log_document_root %%>/image.log', 'H', 8, 30,)

[formatter_simple]
format=%%(asctime)s %%(levelname)s %%(name)s: %%(message)s
datefmt=

# ==== individual image loggers ====

%(image_loggers_and_handlers)s"""

IMAGE_HANDLER = """
[handler_%(title)s]
level=INFO
class=logging.handlers.TimedRotatingFileHandler
formatter=simple
args=('<%%= @image_log_document_root %%>/%(filename)s', 'H', 8, 30,)
"""

IMAGE_LOGGER = """
[logger_%(title)s]
level=INFO
handlers=%(handler)s
qualname=nodepool.image.build.%(qualname)s
propagate=0
"""


def get_images_and_providers(config):
    ret = []
    with open(config, 'r') as stream:
        config = yaml.load(stream)
        for label in config['labels']:
            for provider in label['providers']:
                ret.append((provider['name'], label['name']))
    logging.debug("Added %d providers & images" % len(ret))
    return ret


def generate_logger_and_handler(provider, image):
    handler = IMAGE_HANDLER % {
        'title': '%s_%s' % (provider, image),
        'filename': '%s.%s.log' % (provider, image),
    }
    logger = IMAGE_LOGGER % {
        'title': '%s_%s' % (provider, image),
        'handler': '%s_%s' % (provider, image),
        'qualname': '%s.%s' % (provider, image),
    }

    return {
        'handler_title': '%s_%s' % (provider, image),
        'logger_title': '%s_%s' % (provider, image),
        'handler': handler,
        'logger': logger,
    }


def main():

    parser = argparse.ArgumentParser(description="Parse the nodepool "
                                     "config file and generate a log config")

    parser.add_argument('-d', '--debug', action='store_true',
                        help="Enable debugging")
    parser.add_argument('-c', '--config', default=CONFIG_FILE,
                        help="Config file to read in, "
                        "(default: %s)" % CONFIG_FILE)
    parser.add_argument('output', help='Output file')
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

    loggers_and_handlers = []
    logging.debug("Reading config file %s" % args.config)
    for (provider, image) in get_images_and_providers(args.config):
        loggers_and_handlers.append(
            generate_logger_and_handler(provider, image))

    logger_titles = []
    handler_titles = []
    image_loggers_and_handlers = ""
    for item in loggers_and_handlers:
        logger_titles.append(item['logger_title'])
        handler_titles.append(item['handler_title'])
        image_loggers_and_handlers += item['logger'] + item['handler']

    output = BASIC_FILE % {
        'logger_titles': ','.join(logger_titles),
        'handler_titles': ','.join(handler_titles),
        'image_loggers_and_handlers': image_loggers_and_handlers,
    }

    logging.debug("Writing generated output to %s" % args.output)
    with open(args.output, 'w') as output_file:
        output_file.write(output)

    logging.debug("done!")


if __name__ == "__main__":
    main()
