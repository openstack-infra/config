#!/bin/bash
# Copyright (c) 2019 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Make a list of bindep dependencies and a collection of built binary
# wheels for the repo in question as well as its python dependencies.
# Install javascript tools as well to support python that needs javascript
# at build time.
set -ex

mkdir -p /output/bindep
mkdir -p /output/wheels

cd /tmp/src

apt-get update

# Protect from the bindep builder image use of the assemble script
# to produce a wheel
if [ -f bindep.txt -o -f other-requirements.txt ] ; then
  bindep -l newline > /output/bindep/run.txt || true
  compile_packages=$(bindep -b compile || true)
  if [ ! -z "$compile_packages" ] ; then
    apt-get install -y ${compile_packages}
  fi
fi

# pbr needs git installed, else nothing will work
apt-get install -y git

# Build a wheel so that we have an install target.
# pip install . in the container context with the mounted
# source dir gets ... exciting.
# We run sdist first to trigger code generation steps such
# as are found in zuul, since the sequencing otherwise
# happens in a way that makes wheel content copying unhappy.
# pip wheel isn't used here because it puts all of the output
# in the output dir and not the wheel cache, so it's not
# possible to tell what is the wheel for the project and
# what is the wheel cache.
python setup.py sdist bdist_wheel -d /output/wheels

# Install everything so that the wheel cache is populated
# with transitive depends.
pip install --cache-dir=/output/wheels /output/wheels/*whl
