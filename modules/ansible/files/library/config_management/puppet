#!/usr/bin/python

# Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software.  If not, see <http://www.gnu.org/licenses/>.

import pipes

DOCUMENTATION = '''
---
module: puppet
short_description: Runs puppet
description:
  - Runs I(puppet) agent in a reliable manner
version_added: "1.5.6"
options:
  timeout:
    description:
      - How long to wait for I(puppet) to finish.
    required: false
    default: 30m
  show_diff:
    description:
      - Should puppet return diffs of changes applied. Defaults to off to avoid leaking secret changes by default.
    required: false
    default: no
    choices: [ "yes", "no" ]
  override:
    description:
      - Run puppet even if puppet is disabled on the host.
    required: false
    default: no
    choices: [ "yes", "no" ]
  environment:
    description:
      - Run puppet in an alternate environment.
    required: false
    default: null
  verbose:
    description:
      - Should puppet agent run in verbose mode.
    required: false
    default: no
    choices: [ "yes", "no" ]
requirements: [ puppet ]
author: Monty Taylor
'''

EXAMPLES = '''
# Run puppet and fail if anything goes wrong
- puppet:

# Run puppet and timeout in 5 minutes
- puppet: timeout=5m

# Force a run of puppet on a host where it's been disabled
- puppet: override=yes

# Run puppet in an alternate environment
- puppet: environment=preprod

# Run puppet verbosely
- puppet: verbose=yes

# Run puppet from a test env and get all of the information back possible
- puppet: environment=test verbose=yes show_diff=yes
'''


def main():
    module = AnsibleModule(
        argument_spec=dict(
            timeout=dict(default="30m"),
            show_diff=dict(
                default=False, aliases=['show-diff'], type='bool'),
            override=dict(default=False, type='bool'),
            verbose=dict(default=False, type='bool'),
            environment=dict(),
        ),
    )
    p = module.params

    global PUPPET_CMD
    PUPPET_CMD = module.get_bin_path("puppet", False)

    if not PUPPET_CMD:
        module.fail_json(
            msg="Could not find puppet. Please ensure it is installed.")

    cmd = [
        'timeout', '-s', '9', pipes.quote(p['timeout']),
        PUPPET_CMD, 'agent',
        '--onetime', '--ignorecache', '--no-daemonize',
        '--no-usecacheonfailure', '--no-splay',
    ]

    if p['show_diff']:
        cmd.append('--show-diff')
    if p['override']:
        cmd.append('--puppetdlockfile=/tmp/ansible.puppet.lock')
    if p['environment']:
        cmd.append('--environment=%s' % pipes.quote(p['environment']))
    if p['verbose']:
        cmd.append('--verbose')

    rc, stdout, stderr = module.run_command(cmd)

    if rc == 0:
        # success
        module.exit_json(rc=rc, changed=False, stdout=stdout)
    elif rc == 1:
        # rc==1 could be because it's disabled
        # rc==1 could also mean there was a compilation failure
        disabled = "administratively disabled" in stdout
        if disabled:
            msg = "puppet is disabled"
        else:
            msg = "puppet did not run"
        module.exit_json(
            rc=rc, disabled=disabled, msg=msg,
            error=True, stdout=stdout, stderr=stderr)
    elif rc == 2:
        # success with changes
        module.exit_json(rc=0, changed=True)
    elif rc == 124:
        # timeout
        module.exit_json(
            rc=rc, msg="%s timed out" % cmd, stdout=stdout, stderr=stderr)
    else:
        # failure
        module.fail_json(
            rc=rc, msg="%s failed with return code: %d" % (cmd, rc),
            stdout=stdout, stderr=stderr)

# import module snippets
from ansible.module_utils.basic import *

main()
